@startuml
!pragma layout smetana
'https://plantuml.com/class-diagram
class Main {
    + {static} void main()
}

class Application {
    - User currentUser
    + final Stack<IMenu> menuStack
    + public final IUI ui
    + public final IDataIO dataIO
    + void run()
    + User getCurrentUser()
    + void setCurrentUser(User currentUser)
}

interface IDataIO {
    + ArrayList<String> readData(String path)
    + void updateUserData(String path, User user)
    + void writeNewUserData(String path, ArrayList<User> data)
    + void writeGameData(String path, Arraylist<String> data)
    + default FileIO asFileIO()
}

class FileIO implements IDataIO {
    - Scanner scanner
    + ArrayList<String> readData(String path)
    + void updateUserData(String path, User user)
    + void writeNewUserData(String path, User user)
    + void writeGameData(String path, Arraylist<String> data)

}

interface IUI {
    + String getInput(String msg)
    + void displayMessage(String msg)
    + void displayMessageOnLine(String msg)
    + default TextUI asTextUI()
}

class TextUI implements IUI {
    - Scanner scanner
    + String getInput(String msg)
    + String getInputOnLine(String msg)
    + void displayMessage(String msg)
    + void displayMessageOnLine(String msg)
    + void printPortfolio(Arraylist<Equity> equities)
    + void clearConsole()
}

interface IMenu {
    + void enter(Application application)
    + void exit(Application application)
}

class StartMenu implements IMenu {
    - User currentUser
    - String currentUsername
    - String currentPassword
    + void enter()
    + void exit()
    - User logIn()
    - boolean checkExistingUsername(String username, FileIO fileIO)
    - boolean checkCorrectPassword(String password, FileIO fileIO)
}

class MainMenu implements IMenu {
    + void enter()
    + void exit()
}

class TransactionMenu implements IMenu {
    + void enter()
    + void exit()
}

class TransactionManager {
    + void makeTransaction(IEquity equity, User user)
}

class GameManager {
    + void chooseWinLoseCondition()
    + void chooseGameLength()
    + boolean hasPlayerWon()
    + boolean hasPlayerLost()
}

class SimulationManager {
    + void simulateDay(Application application)
}

class User {
    - String username
    - String password
    - Portfolio portfolio
    + User(String username, String password)
    + String getUsername()
    + String getPassword()
    + Portfolio getPortfolio()
}

class Portfolio {
    - Arraylist<IEquity> equities
    - Dictionary<String, int> equityAmount
    - Dictionary<String, int> purchasePrices
    - float balance
    + Portfolio(Arraylist<Equity> equities, float balance)
    + float calculateTotalValue()
    + float getBalance()
    + void setBalance()

}

interface IEquity {
    + String getName()
    + float getPrice()
    + void setPrice(float price)
}

abstract class AStock implements IEquity {
    - Range range
    - float riskOfBankruptcy
    - String name
    - float price
    + AStock(String name, int price, Range range, float riskOfBankruptcy)
    + String toString()
}

class PennyStock extends AStock {
    + PennyStock(String name, int price, Range range, float riskOfBankruptcy)
    + String getName()
    + float getPrice()
    + void setPrice(float price)
}
class SmallCapStock extends AStock {
    + SmallCapStock(String name, int price, Range range, float riskOfBankruptcy)
    + String getName()
    + float getPrice()
    + void setPrice(float price)
}
class MediumCapStock extends AStock {
    + MediumCapStock(String name, int price, Range range, float riskOfBankruptcy)
    + String getName()
    + float getPrice()
    + void setPrice(float price)
}
class LargeCapStock extends AStock {
    + LargeCapStock(String name, int price, Range range, float riskOfBankruptcy)
    + String getName()
    + float getPrice()
    + void setPrice(float price)
}

class Range {
    + final float min
    + final float max
    + Range(float min, float max)
}

Main *-- Application
Application *-- IMenu
Application *-- User
Application *-- SimulationManager
Application *-- GameManager
Application *-- IUI
Application *-- IDataIO

TransactionMenu *-- TransactionManager

User *-- Portfolio
Portfolio *-- IEquity
PennyStock *-- Range
SmallCapStock *-- Range
MediumCapStock *-- Range
LargeCapStock *-- Range
@enduml